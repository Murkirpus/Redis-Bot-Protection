<?php
// /home/kinoprostor/kinoprostor15.2/dos/bot_protection/redis_test.php

// –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é Redis-–≤–µ—Ä—Å–∏—é –∑–∞—â–∏—Ç—ã
require_once 'inline_check.php';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞—â–∏—Ç—É
try {
   $protection = new RedisBotProtectionWithSessions(
       '127.0.0.1',    // Redis host
       6379,           // Redis port
       null,           // Redis password
       0               // Redis database
   );
   $protectionActive = true;
} catch (Exception $e) {
   $protectionActive = false;
   error_log("Redis protection initialization failed: " . $e->getMessage());
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Redis-—Å–∏—Å—Ç–µ–º–æ–π –∑–∞—â–∏—Ç—ã
function isVerifiedUser() {
   return isset($_SESSION['bot_protection']['verified']) && 
          $_SESSION['bot_protection']['verified'] === true;
}

function getUserVisitInfo() {
   if (!isset($_SESSION['bot_protection'])) {
       return null;
   }
   
   return [
       'first_visit' => $_SESSION['bot_protection']['first_visit'],
       'pages_visited' => $_SESSION['bot_protection']['pages_visited'] ?? 1,
       'visit_count' => $_SESSION['bot_protection']['visit_count'] ?? 1,
       'last_activity' => $_SESSION['bot_protection']['last_activity'] ?? time(),
       'ip' => $_SESSION['bot_protection']['ip'] ?? 'unknown',
       'user_agent' => $_SESSION['bot_protection']['user_agent'] ?? 'unknown'
   ];
}

function getVisitorTrustScore() {
   $info = getUserVisitInfo();
   if (!$info) return 0;
   
   $score = 0;
   $timeOnSite = time() - $info['first_visit'];
   
   if ($timeOnSite > 300) $score += 20;
   if ($timeOnSite > 900) $score += 30;
   if ($info['pages_visited'] > 3) $score += 20;
   if ($info['pages_visited'] > 10) $score += 30;
   if ($info['visit_count'] > 1) $score += 30;
   
   return min($score, 100);
}

function getCurrentIP() {
   $ipHeaders = [
       'HTTP_CF_CONNECTING_IP',
       'HTTP_X_REAL_IP', 
       'HTTP_X_FORWARDED_FOR',
       'REMOTE_ADDR'
   ];
   
   foreach ($ipHeaders as $header) {
       if (!empty($_SERVER[$header])) {
           $ips = explode(',', $_SERVER[$header]);
           return trim($ips[0]);
       }
   }
   
   return $_SERVER['REMOTE_ADDR'] ?? 'unknown';
}

function getRedisStats($protection) {
   if (!$protection) return null;
   
   try {
       return $protection->getStats();
   } catch (Exception $e) {
       return null;
   }
}

function getRedisInfo($protection, $ip) {
   if (!$protection) return null;
   
   try {
       return $protection->getBlockedIPInfo($ip);
   } catch (Exception $e) {
       return null;
   }
}

function getUserHashInfo($protection) {
   if (!$protection) return null;
   
   try {
       return $protection->getUserHashInfo();
   } catch (Exception $e) {
       return null;
   }
}

function getUserHashStats($protection) {
   if (!$protection) return null;
   
   try {
       return $protection->getUserHashStats();
   } catch (Exception $e) {
       return null;
   }
}

function getTTLSettings($protection) {
   if (!$protection) return null;
   
   try {
       return $protection->getTTLSettings();
   } catch (Exception $e) {
       return null;
   }
}

function isMobileDevice($userAgent) {
    $mobilePatterns = [
        'Mobile', 'Android', 'iPhone', 'iPad', 'iPod', 
        'Mobile Safari', 'Chrome Mobile', 'Firefox Mobile', 'Opera Mini', 'Opera Mobi',
        'BlackBerry', 'Windows Phone', 'IEMobile', 'Kindle', 'Silk',
        'Tablet', 'PlayBook',
        'webOS', 'hpwOS', 'Bada', 'Tizen', 'NetFront', 'Fennec'
    ];
    
    $userAgent = strtolower($userAgent);
    
    foreach ($mobilePatterns as $pattern) {
        if (stripos($userAgent, strtolower($pattern)) !== false) {
            return true;
        }
    }
    
    $mobileRegex = '/mobile|android|iphone|ipad|ipod|blackberry|iemobile|opera m(ob|in)i/i';
    return preg_match($mobileRegex, $userAgent);
}

// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
$isVerified = isVerifiedUser();
$visitInfo = getUserVisitInfo();
$trustScore = getVisitorTrustScore();
$currentIP = getCurrentIP();
$currentUA = $_SERVER['HTTP_USER_AGENT'] ?? 'unknown';
$isMobile = isMobileDevice($currentUA);
$redisStats = $protectionActive ? getRedisStats($protection) : null;
$ipInfo = $protectionActive ? getRedisInfo($protection, $currentIP) : null;
$userHashInfo = $protectionActive ? getUserHashInfo($protection) : null;
$userHashStats = $protectionActive ? getUserHashStats($protection) : null;
$ttlSettings = $protectionActive ? getTTLSettings($protection) : null;
?>
<!DOCTYPE html>
<html lang="ru">
<head>
   <meta charset="UTF-8">
   <meta name="viewport" content="width=device-width, initial-scale=1.0">
   <title>üõ°Ô∏è Redis MurKir Security Test v2.0</title>
   <style>
       body {
           font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
           margin: 0;
           padding: 20px;
           background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
           min-height: 100vh;
           color: #333;
       }
       .container {
           max-width: 1400px;
           margin: 0 auto;
           background: white;
           padding: 30px;
           border-radius: 15px;
           box-shadow: 0 10px 30px rgba(0,0,0,0.2);
       }
       .header {
           text-align: center;
           border-bottom: 3px solid #007bff;
           padding-bottom: 20px;
           margin-bottom: 30px;
           background: linear-gradient(135deg, #007bff, #0056b3);
           color: white;
           padding: 30px;
           border-radius: 10px;
           margin: -30px -30px 30px -30px;
       }
       .status-card {
           background: linear-gradient(135deg, #e8f5e8, #d4edda);
           border: 1px solid #28a745;
           border-radius: 12px;
           padding: 20px;
           margin: 20px 0;
           box-shadow: 0 4px 15px rgba(40, 167, 69, 0.1);
       }
       .status-card.warning {
           background: linear-gradient(135deg, #fff3cd, #ffeaa7);
           border-color: #ffc107;
           color: #856404;
       }
       .status-card.error {
           background: linear-gradient(135deg, #f8d7da, #fab1a0);
           border-color: #dc3545;
           color: #721c24;
       }
       .status-card.redis {
           background: linear-gradient(135deg, #e3f2fd, #bbdefb);
           border-color: #2196f3;
           color: #0d47a1;
       }
       .status-card.user-hash {
           background: linear-gradient(135deg, #f3e5f5, #e1bee7);
           border-color: #9c27b0;
           color: #4a148c;
       }
       .info-grid {
           display: grid;
           grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
           gap: 20px;
           margin: 20px 0;
       }
       .info-box {
           background: #f8f9fa;
           border-left: 4px solid #007bff;
           padding: 20px;
           border-radius: 8px;
           box-shadow: 0 2px 10px rgba(0,0,0,0.05);
       }
       .info-box h3 {
           margin-top: 0;
           color: #007bff;
       }
       .metrics {
           display: grid;
           grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
           gap: 20px;
           margin: 30px 0;
       }
       .metric {
           text-align: center;
           padding: 20px;
           background: linear-gradient(135deg, #f8f9fa, #e9ecef);
           border-radius: 12px;
           box-shadow: 0 4px 15px rgba(0,0,0,0.1);
       }
       .metric .number {
           font-size: 2.5em;
           font-weight: bold;
           color: #007bff;
           margin-bottom: 5px;
       }
       .metric .label {
           color: #6c757d;
           font-weight: 500;
       }
       .redis-status {
           display: inline-block;
           padding: 4px 8px;
           border-radius: 4px;
           font-size: 0.8em;
           font-weight: bold;
       }
       .redis-status.connected {
           background: #d4edda;
           color: #155724;
       }
       .redis-status.disconnected {
           background: #f8d7da;
           color: #721c24;
       }
       .redis-key {
           font-family: monospace;
           background: #e9ecef;
           padding: 2px 6px;
           border-radius: 4px;
           font-size: 0.9em;
       }
       .progress-bar {
           width: 100%;
           height: 12px;
           background: #e9ecef;
           border-radius: 6px;
           overflow: hidden;
           margin: 10px 0;
       }
       .progress-fill {
           height: 100%;
           transition: width 0.5s ease;
           border-radius: 6px;
       }
       .btn {
           display: inline-block;
           padding: 12px 24px;
           background: linear-gradient(135deg, #007bff, #0056b3);
           color: white;
           text-decoration: none;
           border-radius: 8px;
           margin: 5px;
           transition: all 0.3s ease;
           border: none;
           cursor: pointer;
           font-size: 14px;
       }
       .btn:hover {
           transform: translateY(-2px);
           box-shadow: 0 4px 15px rgba(0, 123, 255, 0.3);
       }
       .btn.secondary {
           background: linear-gradient(135deg, #6c757d, #495057);
       }
       .btn.danger {
           background: linear-gradient(135deg, #dc3545, #c82333);
       }
       .btn.success {
           background: linear-gradient(135deg, #28a745, #1e7e34);
       }
       .btn.warning {
           background: linear-gradient(135deg, #ffc107, #e0a800);
           color: #212529;
       }
       .table {
           width: 100%;
           border-collapse: collapse;
           margin: 20px 0;
           box-shadow: 0 2px 10px rgba(0,0,0,0.1);
           border-radius: 8px;
           overflow: hidden;
       }
       .table th, .table td {
           border: 1px solid #dee2e6;
           padding: 12px 15px;
           text-align: left;
       }
       .table th {
           background: linear-gradient(135deg, #007bff, #0056b3);
           color: white;
           font-weight: bold;
       }
       .table tr:nth-child(even) {
           background: #f8f9fa;
       }
       .table tr:hover {
           background: #e2e6ea;
       }
       .device-indicator {
           display: inline-flex;
           align-items: center;
           gap: 5px;
           padding: 4px 8px;
           border-radius: 4px;
           font-size: 0.8em;
           font-weight: bold;
       }
       .device-mobile {
           background: #e1f5fe;
           color: #01579b;
       }
       .device-desktop {
           background: #f3e5f5;
           color: #4a148c;
       }
       .hash-display {
           font-family: monospace;
           background: #e9ecef;
           padding: 8px 12px;
           border-radius: 6px;
           border: 1px solid #dee2e6;
           word-break: break-all;
           font-size: 0.9em;
           line-height: 1.4;
       }
       .tabs {
           display: flex;
           background: #f8f9fa;
           border-radius: 8px;
           padding: 5px;
           margin-bottom: 20px;
           flex-wrap: wrap;
       }
       .tab {
           flex: 1;
           text-align: center;
           padding: 10px;
           background: transparent;
           border: none;
           border-radius: 6px;
           cursor: pointer;
           transition: all 0.3s ease;
           min-width: 120px;
           font-size: 0.9em;
       }
       .tab.active {
           background: white;
           box-shadow: 0 2px 4px rgba(0,0,0,0.1);
           color: #007bff;
           font-weight: bold;
       }
       .tab-content {
           display: none;
       }
       .tab-content.active {
           display: block;
       }
       pre {
           background: #2d3748;
           color: #e2e8f0;
           border: 1px solid #4a5568;
           padding: 15px;
           border-radius: 8px;
           overflow-x: auto;
           font-size: 12px;
           font-family: 'Consolas', 'Monaco', monospace;
           max-height: 400px;
       }
       .protection-level {
           display: inline-block;
           padding: 6px 12px;
           border-radius: 20px;
           font-weight: bold;
           font-size: 0.9em;
       }
       .protection-basic {
           background: #fff3cd;
           color: #856404;
       }
       .protection-enhanced {
           background: #d1ecf1;
           color: #0c5460;
       }
       .protection-maximum {
           background: #d4edda;
           color: #155724;
       }
       @media (max-width: 768px) {
           .container {
               padding: 15px;
           }
           .info-grid {
               grid-template-columns: 1fr;
           }
           .metrics {
               grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
           }
           .tabs {
               flex-direction: column;
           }
           .tab {
               flex: none;
               margin: 2px 0;
           }
       }
   </style>
</head>
<body>
   <div class="container">
       <div class="header">
           <h1>üõ°Ô∏è Redis MurKir Security System v2.0</h1>
           <p>–°–∏—Å—Ç–µ–º–∞ –∑–∞—â–∏—Ç—ã —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π –ø–æ —Ö–µ—à—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</p>
           <div class="redis-status <?php echo $protectionActive ? 'connected' : 'disconnected'; ?>">
               Redis: <?php echo $protectionActive ? 'Connected' : 'Disconnected'; ?>
           </div>
           <div class="device-indicator <?php echo $isMobile ? 'device-mobile' : 'device-desktop'; ?>">
               <?php echo $isMobile ? 'üì± Mobile Device' : 'üñ•Ô∏è Desktop Device'; ?>
           </div>
       </div>

       <!-- –°—Ç–∞—Ç—É—Å Redis -->
       <div class="status-card redis">
           <h2>üìä –°—Ç–∞—Ç—É—Å Redis Protection v2.0</h2>
           <?php if ($protectionActive): ?>
               <p><strong>‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç</strong></p>
               <div class="protection-level protection-maximum">üõ°Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ –∞–∫—Ç–∏–≤–Ω–∞</div>
               
               <?php if ($redisStats): ?>
                   <div class="metrics">
                       <div class="metric">
                           <div class="number"><?php echo $redisStats['blocked_ips']; ?></div>
                           <div class="label">–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö IP</div>
                       </div>
                       <div class="metric">
                           <div class="number"><?php echo $redisStats['blocked_sessions']; ?></div>
                           <div class="label">–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π</div>
                       </div>
                       <div class="metric">
                           <div class="number"><?php echo $redisStats['blocked_cookies']; ?></div>
                           <div class="label">–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö cookies</div>
                       </div>
                       <div class="metric">
                           <div class="number"><?php echo $redisStats['blocked_user_hashes'] ?? 0; ?></div>
                           <div class="label">–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ö–µ—à–µ–π</div>
                       </div>
                   </div>
               <?php endif; ?>
           <?php else: ?>
               <p><strong>‚ùå Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</strong></p>
               <div class="protection-level protection-basic">‚ö†Ô∏è –ë–∞–∑–æ–≤–∞—è –∑–∞—â–∏—Ç–∞</div>
               <p>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis —Å–µ—Ä–≤–µ—Ä—É. –°–∏—Å—Ç–µ–º–∞ –∑–∞—â–∏—Ç—ã –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.</p>
           <?php endif; ?>
       </div>

       <!-- –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è -->
       <div class="status-card <?php echo $isVerified ? '' : 'warning'; ?>">
           <h2>üë§ –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</h2>
           <?php if ($isVerified): ?>
               <p><strong>‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</strong></p>
               <div style="margin: 15px 0;">
                   <div><strong>üéØ –£—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∏—è:</strong> <?php echo $trustScore; ?>%</div>
                   <div class="progress-bar">
                       <div class="progress-fill" style="width: <?php echo $trustScore; ?>%; background: linear-gradient(90deg, #28a745, #20c997);"></div>
                   </div>
               </div>
           <?php else: ?>
               <p><strong>‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω</strong></p>
               <p>–í–æ–∑–º–æ–∂–Ω–æ, —Å–∏—Å—Ç–µ–º–∞ –∑–∞—â–∏—Ç—ã –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.</p>
           <?php endif; ?>
       </div>

       <!-- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ö–µ—à–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è -->
       <?php if ($userHashInfo): ?>
       <div class="status-card user-hash <?php echo $userHashInfo['blocked'] ? 'error' : ''; ?>">
           <h2>üîê –•–µ—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</h2>
           <div class="info-grid">
               <div>
                   <p><strong>–°—Ç–∞—Ç—É—Å —Ö–µ—à–∞:</strong> 
                       <?php if ($userHashInfo['blocked']): ?>
                           <span style="color: #dc3545; font-weight: bold;">üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω</span>
                       <?php else: ?>
                           <span style="color: #28a745; font-weight: bold;">‚úÖ –ê–∫—Ç–∏–≤–µ–Ω</span>
                       <?php endif; ?>
                   </p>
                   
                   <p><strong>–•–µ—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</strong></p>
                   <div class="hash-display">
                       <?php echo htmlspecialchars(substr($userHashInfo['user_hash'], 0, 32)); ?>...
                   </div>
                   
                   <p><strong>–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:</strong> 
                       <span class="device-indicator <?php echo $isMobile ? 'device-mobile' : 'device-desktop'; ?>">
                           <?php echo $isMobile ? 'üì± –ú–æ–±–∏–ª—å–Ω–æ–µ' : 'üñ•Ô∏è –î–µ—Å–∫—Ç–æ–ø'; ?>
                       </span>
                   </p>
                   
                   <?php if ($userHashInfo['blocked'] && $userHashInfo['block_ttl'] > 0): ?>
                       <p><strong>–í—Ä–µ–º—è –¥–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:</strong> <?php echo gmdate('H:i:s', $userHashInfo['block_ttl']); ?></p>
                   <?php endif; ?>
               </div>
               
               <?php if ($userHashInfo['tracking_data']): ?>
               <div>
                   <h4>üìä –î–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏–Ω–≥–∞ —Ö–µ—à–∞:</h4>
                   <table class="table">
                       <tr><td><strong>–ó–∞–ø—Ä–æ—Å–æ–≤:</strong></td><td><?php echo $userHashInfo['tracking_data']['requests'] ?? 0; ?></td></tr>
                       <tr><td><strong>–ü–µ—Ä–≤—ã–π –≤–∏–∑–∏—Ç:</strong></td><td><?php echo date('H:i:s', $userHashInfo['tracking_data']['first_seen'] ?? time()); ?></td></tr>
                       <tr><td><strong>–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</strong></td><td><?php echo date('H:i:s', $userHashInfo['tracking_data']['last_activity'] ?? time()); ?></td></tr>
                       <tr><td><strong>–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö IP:</strong></td><td><?php echo count(array_unique($userHashInfo['tracking_data']['ips'] ?? [])); ?></td></tr>
                       <tr><td><strong>–°—Ç—Ä–∞–Ω–∏—Ü –ø–æ—Å–µ—â–µ–Ω–æ:</strong></td><td><?php echo count(array_unique($userHashInfo['tracking_data']['pages'] ?? [])); ?></td></tr>
                   </table>
               </div>
               <?php endif; ?>
           </div>
       </div>
       <?php endif; ?>

       <!-- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º IP -->
       <?php if ($ipInfo): ?>
       <div class="status-card <?php echo $ipInfo['blocked'] ? 'error' : ''; ?>">
           <h2>üåê –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ IP –∞–¥—Ä–µ—Å–µ</h2>
           <div class="info-grid">
               <div>
                   <p><strong>IP –∞–¥—Ä–µ—Å:</strong> <span class="redis-key"><?php echo htmlspecialchars($currentIP); ?></span></p>
                   <p><strong>–°—Ç–∞—Ç—É—Å:</strong> 
                       <?php if ($ipInfo['blocked']): ?>
                           <span style="color: #dc3545; font-weight: bold;">üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω</span>
                       <?php else: ?>
                           <span style="color: #28a745; font-weight: bold;">‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω</span>
                       <?php endif; ?>
                   </p>
                   <?php if ($ipInfo['blocked'] && $ipInfo['ttl'] > 0): ?>
                       <p><strong>–í—Ä–µ–º—è –¥–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:</strong> <?php echo gmdate('H:i:s', $ipInfo['ttl']); ?></p>
                   <?php endif; ?>
               </div>
           </div>
       </div>
       <?php endif; ?>

       <!-- –ú–µ—Ç—Ä–∏–∫–∏ —Å–µ—Å—Å–∏–∏ -->
       <?php if ($visitInfo): ?>
       <div class="metrics">
           <div class="metric">
               <div class="number"><?php echo $visitInfo['pages_visited']; ?></div>
               <div class="label">–°—Ç—Ä–∞–Ω–∏—Ü –ø–æ—Å–µ—â–µ–Ω–æ</div>
           </div>
           <div class="metric">
               <div class="number"><?php echo $visitInfo['visit_count']; ?></div>
               <div class="label">–í—Å–µ–≥–æ –≤–∏–∑–∏—Ç–æ–≤</div>
           </div>
           <div class="metric">
               <div class="number"><?php echo round((time() - $visitInfo['first_visit']) / 60, 1); ?></div>
               <div class="label">–ú–∏–Ω—É—Ç –Ω–∞ —Å–∞–π—Ç–µ</div>
           </div>
           <div class="metric">
               <div class="number"><?php echo $trustScore; ?>%</div>
               <div class="label">–£—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∏—è</div>
           </div>
       </div>
       <?php endif; ?>

       <!-- –¢–∞–±—ã -->
       <div class="tabs">
           <button class="tab active" onclick="showTab('request-info')">üåê –ó–∞–ø—Ä–æ—Å</button>
           <button class="tab" onclick="showTab('session-info')">üîí –°–µ—Å—Å–∏—è</button>
           <button class="tab" onclick="showTab('redis-keys')">üîë Redis –∫–ª—é—á–∏</button>
           <button class="tab" onclick="showTab('ttl-settings')">‚è±Ô∏è TTL –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</button>
           <button class="tab" onclick="showTab('testing')">üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</button>
       </div>

       <!-- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø—Ä–æ—Å–µ -->
       <div id="request-info" class="tab-content active">
           <div class="info-box">
               <h3>üåê –î–µ—Ç–∞–ª–∏ –∑–∞–ø—Ä–æ—Å–∞</h3>
               <table class="table">
                   <tr><td><strong>IP –∞–¥—Ä–µ—Å:</strong></td><td><span class="redis-key"><?php echo htmlspecialchars($currentIP); ?></span></td></tr>
                   <tr><td><strong>User-Agent:</strong></td><td><?php echo htmlspecialchars(substr($currentUA, 0, 80)) . (strlen($currentUA) > 80 ? '...' : ''); ?></td></tr>
                   <tr><td><strong>–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:</strong></td><td><?php echo $isMobile ? 'üì± –ú–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ' : 'üñ•Ô∏è –î–µ—Å–∫—Ç–æ–ø–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ'; ?></td></tr>
                   <tr><td><strong>–ú–µ—Ç–æ–¥:</strong></td><td><?php echo $_SERVER['REQUEST_METHOD'] ?? 'GET'; ?></td></tr>
                   <tr><td><strong>–í—Ä–µ–º—è:</strong></td><td><?php echo date('Y-m-d H:i:s'); ?></td></tr>
                   <tr><td><strong>Session ID:</strong></td><td><span class="redis-key"><?php echo substr(session_id(), 0, 16); ?>...</span></td></tr>
                   <tr><td><strong>URI:</strong></td><td><?php echo htmlspecialchars($_SERVER['REQUEST_URI'] ?? '/'); ?></td></tr>
               </table>
           </div>
       </div>

       <!-- –°–µ—Å—Å–∏—è -->
       <div id="session-info" class="tab-content">
           <div class="info-box">
               <h3>üîí –î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏</h3>
               <?php if (isset($_SESSION['bot_protection'])): ?>
                   <pre><?php echo json_encode($_SESSION['bot_protection'], JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE); ?></pre>
               <?php else: ?>
                   <p style="color: #6c757d;">–î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã</p>
               <?php endif; ?>
           </div>
       </div>

       <!-- Redis –∫–ª—é—á–∏ -->
       <div id="redis-keys" class="tab-content">
           <div class="info-box">
               <h3>üîë Redis –∫–ª—é—á–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</h3>
               
               <h4>üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ Redis –∫–ª—é—á–µ–π:</h4>
               <table class="table">
                   <thead>
                       <tr>
                           <th>–¢–∏–ø –∫–ª—é—á–∞</th>
                           <th>–ü—Ä–µ—Ñ–∏–∫—Å</th>
                           <th>–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ</th>
                       </tr>
                   </thead>
                   <tbody>
                       <tr>
                           <td>IP Tracking</td>
                           <td>bot_protection:tracking:ip:</td>
                           <td>–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ IP</td>
                       </tr>
                       <tr>
                           <td>IP Block</td>
                           <td>bot_protection:blocked:ip:</td>
                           <td>–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ IP –∞–¥—Ä–µ—Å–∞</td>
                       </tr>
                       <tr>
                           <td>Session Data</td>
                           <td>bot_protection:session:data:</td>
                           <td>–î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏</td>
                       </tr>
                       <tr style="background: #e3f2fd;">
                           <td><strong>User Hash Block</strong></td>
                           <td>bot_protection:user_hash:blocked:</td>
                           <td><strong>–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ —Ö–µ—à—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</strong></td>
                       </tr>
                       <tr style="background: #e3f2fd;">
                           <td><strong>User Hash Tracking</strong></td>
                           <td>bot_protection:user_hash:tracking:</td>
                           <td><strong>–¢—Ä–µ–∫–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ö–µ—à–∞</strong></td>
                       </tr>
                   </tbody>
               </table>
           </div>
       </div>

       <!-- TTL –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ -->
       <div id="ttl-settings" class="tab-content">
           <div class="info-box">
               <h3>‚è±Ô∏è TTL –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã</h3>
               <?php if ($ttlSettings): ?>
                   <table class="table">
                       <thead>
                           <tr>
                               <th>–ü–∞—Ä–∞–º–µ—Ç—Ä</th>
                               <th>–í—Ä–µ–º—è (—Å–µ–∫)</th>
                               <th>–í—Ä–µ–º—è (—á–∏—Ç–∞–µ–º–æ)</th>
                               <th>–û–ø–∏—Å–∞–Ω–∏–µ</th>
                           </tr>
                       </thead>
                       <tbody>
                           <?php foreach ($ttlSettings as $key => $value): ?>
                               <tr>
                                   <td><code><?php echo htmlspecialchars($key); ?></code></td>
                                   <td><?php echo $value; ?></td>
                                   <td>
                                       <?php 
                                       if ($value >= 3600) {
                                           echo round($value/3600, 1) . ' —á';
                                       } elseif ($value >= 60) {
                                           echo round($value/60) . ' –º–∏–Ω';
                                       } else {
                                           echo $value . ' —Å–µ–∫';
                                       }
                                       ?>
                                   </td>
                                   <td>
                                       <?php
                                       $descriptions = [
                                           'tracking_ip' => '–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ IP –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
                                           'session_data' => '–î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
                                           'session_blocked' => '–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–µ—Å—Å–∏–∏',
                                           'cookie_blocked' => '–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ cookie',
                                           'ip_blocked' => '–ë–∞–∑–æ–≤–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ IP',
                                           'ip_blocked_repeat' => '–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –Ω–∞—Ä—É—à–∏—Ç–µ–ª–µ–π',
                                           'rdns_cache' => '–ö–µ—à rDNS –∑–∞–ø—Ä–æ—Å–æ–≤',
                                           'logs' => '–•—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–≥–æ–≤',
                                           'cleanup_interval' => '–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ—á–∏—Å—Ç–∫–∏',
                                           'user_hash_blocked' => '–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ö–µ—à–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
                                           'user_hash_tracking' => '–¢—Ä–µ–∫–∏–Ω–≥ —Ö–µ—à–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
                                       ];
                                       echo $descriptions[$key] ?? '–î—Ä—É–≥–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏';
                                       ?>
                                   </td>
                               </tr>
                           <?php endforeach; ?>
                       </tbody>
                   </table>
               <?php else: ?>
                   <p style="color: #6c757d;">TTL –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã</p>
               <?php endif; ?>
           </div>
       </div>

       <!-- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ -->
       <div id="testing" class="tab-content">
           <div class="info-box">
               <h3>üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã v2.0</h3>
               <p>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–∏ —Å—Å—ã–ª–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤:</p>
               
               <div style="margin: 20px 0;">
                   <a href="redis_test.php" class="btn">üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É</a>
                   <a href="redis_test.php?page=2" class="btn secondary">üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 2</a>
                   <a href="redis_test.php?page=3" class="btn secondary">üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 3</a>
                   <a href="redis_test.php?heavy=1" class="btn secondary">‚ö° –¢—è–∂–µ–ª–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è</a>
                   
                   <?php if (isset($_GET['admin']) && $_GET['admin'] === '1'): ?>
                       <a href="redis_test.php" class="btn">üëÅÔ∏è –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º</a>
                   <?php else: ?>
                       <a href="redis_test.php?admin=1" class="btn danger">‚öôÔ∏è –ê–¥–º–∏–Ω —Ä–µ–∂–∏–º</a>
                   <?php endif; ?>
               </div>

               <h4>–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–æ–≤:</h4>
               <pre>
# –¢–µ—Å—Ç curl (–¥–æ–ª–∂–µ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤)
for i in {1..15}; do
  curl -v "<?php echo (isset($_SERVER['HTTPS']) ? 'https' : 'http') . '://' . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI']; ?>"
  sleep 1
done

# –¢–µ—Å—Ç —Å –±—Ä–∞—É–∑–µ—Ä–Ω—ã–º User-Agent
curl -H "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36" \
     -c cookies.txt -b cookies.txt \
     "<?php echo (isset($_SERVER['HTTPS']) ? 'https' : 'http') . '://' . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI']; ?>"

# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Redis
redis-cli monitor

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–π Redis
redis-cli keys "bot_protection:*"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ö–µ—à–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
redis-cli keys "bot_protection:user_hash:*"
               </pre>

               <div style="margin: 15px 0;">
                   <button onclick="botProtectionTest.simulateBot()" class="btn warning">ü§ñ –°–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞</button>
                   <button onclick="botProtectionTest.simulateHuman()" class="btn success">üë§ –°–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —á–µ–ª–æ–≤–µ–∫–∞</button>
                   <button onclick="botProtectionTest.testUserHash()" class="btn secondary">üîê –¢–µ—Å—Ç —Ö–µ—à–∞</button>
               </div>
           </div>
       </div>

       <!-- –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è -->
       <?php if (isset($_GET['admin']) && $_GET['admin'] === '1'): ?>
       <div class="info-box">
           <h3>‚öôÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</h3>
           <div style="margin: 20px 0;">
               <?php
               if (isset($_GET['action']) && $protectionActive) {
                   switch ($_GET['action']) {
                       case 'unblock_ip':
                           $result = $protection->unblockIP($currentIP);
                           echo "<div class='status-card'>";
                           echo "<strong>–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ IP:</strong><br>";
                           echo "IP —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: " . ($result['ip_unblocked'] ? '–î–∞' : '–ù–µ—Ç') . "<br>";
                           echo "–¢—Ä–µ–∫–∏–Ω–≥ –æ—á–∏—â–µ–Ω: " . ($result['tracking_cleared'] ? '–î–∞' : '–ù–µ—Ç');
                           echo "</div>";
                           break;
                       case 'unblock_session':
                           $result = $protection->unblockSession(session_id());
                           echo "<div class='status-card'>";
                           echo "<strong>–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å–µ—Å—Å–∏–∏:</strong><br>";
                           echo "–°–µ—Å—Å–∏—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞: " . ($result['session_unblocked'] ? '–î–∞' : '–ù–µ—Ç') . "<br>";
                           echo "–î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã: " . ($result['session_data_cleared'] ? '–î–∞' : '–ù–µ—Ç');
                           echo "</div>";
                           break;
                       case 'unblock_user_hash':
                           $result = $protection->unblockUserHash();
                           echo "<div class='status-card'>";
                           echo "<strong>–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Ö–µ—à–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</strong><br>";
                           echo "–•–µ—à —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: " . ($result['unblocked'] ? '–î–∞' : '–ù–µ—Ç') . "<br>";
                           echo "–¢—Ä–µ–∫–∏–Ω–≥ –æ—á–∏—â–µ–Ω: " . ($result['tracking_cleared'] ? '–î–∞' : '–ù–µ—Ç');
                           echo "</div>";
                           break;
                       case 'cleanup':
                           $cleaned = $protection->cleanup();
                           echo "<div class='status-card'>";
                           echo "<strong>–û—á–∏—Å—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞:</strong><br>";
                           echo "–£–¥–∞–ª–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: " . ($cleaned !== false ? $cleaned : '–û—à–∏–±–∫–∞');
                           echo "</div>";
                           break;
                   }
               }
               ?>
               
               <a href="redis_test.php?admin=1&action=unblock_ip" class="btn success">üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å IP</a>
               <a href="redis_test.php?admin=1&action=unblock_session" class="btn success">üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Å—Å–∏—é</a>
               <a href="redis_test.php?admin=1&action=unblock_user_hash" class="btn success">üîê –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Ö–µ—à</a>
               <a href="redis_test.php?admin=1&action=cleanup" class="btn secondary">üßπ –û—á–∏—Å—Ç–∫–∞ Redis</a>
               <a href="redis_test.php" class="btn">üëÅÔ∏è –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º</a>
           </div>
       </div>
       <?php endif; ?>

       <!-- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—è–∂–µ–ª—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π -->
       <?php if (isset($_GET['heavy'])): ?>
       <div class="status-card">
           <h3>‚ö° –¢—è–∂–µ–ª–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è</h3>
           <?php
           $start = microtime(true);
           usleep(500000); // 0.5 —Å–µ–∫—É–Ω–¥—ã
           $end = microtime(true);
           $duration = round(($end - $start) * 1000, 2);
           
           echo "<p>‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∑–∞ {$duration} –º—Å</p>";
           echo "<p>–í—Ä–µ–º—è: " . date('H:i:s') . "</p>";
           ?>
       </div>
       <?php endif; ?>

       <hr style="margin: 40px 0; border: none; height: 1px; background: linear-gradient(90deg, transparent, #dee2e6, transparent);">
       
       <p style="text-align: center; color: #6c757d;">
           <small>
               üõ°Ô∏è Redis MurKir Security System v2.0 | 
               Generated: <?php echo date('Y-m-d H:i:s'); ?> | 
               PHP: <?php echo PHP_VERSION; ?> | 
               Session: <?php echo substr(session_id(), 0, 8); ?>... |
               Redis: <?php echo $protectionActive ? 'Active' : 'Inactive'; ?> |
               Device: <?php echo $isMobile ? 'Mobile' : 'Desktop'; ?>
           </small>
       </p>
   </div>

   <script>
       // –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–∞–±–æ–≤
       function showTab(tabId) {
           document.querySelectorAll('.tab-content').forEach(tab => {
               tab.classList.remove('active');
           });
           
           document.querySelectorAll('.tab').forEach(btn => {
               btn.classList.remove('active');
           });
           
           document.getElementById(tabId).classList.add('active');
           event.target.classList.add('active');
       }

       // –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
       let userActivity = {
           mouseMovements: 0,
           clicks: 0,
           scrolls: 0,
           startTime: Date.now(),
           lastActivity: Date.now()
       };

       document.addEventListener('mousemove', () => {
           userActivity.mouseMovements++;
           userActivity.lastActivity = Date.now();
       });
       document.addEventListener('click', () => {
           userActivity.clicks++;
           userActivity.lastActivity = Date.now();
       });
       document.addEventListener('scroll', () => {
           userActivity.scrolls++;
           userActivity.lastActivity = Date.now();
       });

       // –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
       window.botProtectionTest = {
           // –°–∏–º—É–ª—è—Ü–∏—è bot-–ø–æ–¥–æ–±–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
           simulateBot: function() {
               console.log('ü§ñ Simulating bot behavior...');
               for(let i = 0; i < 20; i++) {
                   setTimeout(() => {
                       fetch(window.location.href + '?bot_test=' + i + '&timestamp=' + Date.now())
                           .then(response => console.log(`Bot request ${i}: ${response.status}`))
                           .catch(err => console.log(`Bot request ${i} failed:`, err));
                   }, i * 100);
               }
           },
           
           // –°–∏–º—É–ª—è—Ü–∏—è —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
           simulateHuman: function() {
               console.log('üë§ Simulating human behavior...');
               const pages = ['?page=1', '?page=2', '?page=3', '?about=1', '?contact=1'];
               
               pages.forEach((page, index) => {
                   setTimeout(() => {
                       fetch(window.location.origin + window.location.pathname + page + '&human_test=' + index)
                           .then(response => console.log(`Human request ${index}: ${response.status}`))
                           .catch(err => console.log(`Human request ${index} failed:`, err));
                   }, index * 2000 + Math.random() * 1000);
               });
           },
           
           // –¢–µ—Å—Ç —Ö–µ—à–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
           testUserHash: function() {
               console.log('üîê Testing user hash...');
               fetch(window.location.href + '?hash_test=1&timestamp=' + Date.now())
                   .then(response => response.text())
                   .then(data => {
                       console.log('User hash test completed');
                       this.showNotification('üîê –¢–µ—Å—Ç —Ö–µ—à–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω', 'info');
                   })
                   .catch(err => console.log('Hash test failed:', err));
           },
           
           // –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
           showNotification: function(message, type = 'info') {
               const notification = document.createElement('div');
               notification.style.cssText = `
                   position: fixed;
                   top: 20px;
                   right: 20px;
                   background: ${type === 'error' ? '#dc3545' : type === 'success' ? '#28a745' : '#007bff'};
                   color: white;
                   padding: 15px 25px;
                   border-radius: 8px;
                   font-weight: bold;
                   z-index: 1000;
                   box-shadow: 0 4px 15px rgba(0,0,0,0.2);
                   max-width: 300px;
                   opacity: 0;
                   transform: translateX(100%);
                   transition: all 0.3s ease;
               `;
               notification.textContent = message;
               document.body.appendChild(notification);

               setTimeout(() => {
                   notification.style.opacity = '1';
                   notification.style.transform = 'translateX(0)';
               }, 100);

               setTimeout(() => {
                   notification.style.opacity = '0';
                   notification.style.transform = 'translateX(100%)';
                   setTimeout(() => notification.remove(), 300);
               }, 5000);
           }
       };

       // –ê–Ω–∏–º–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫
       function animateMetrics() {
           document.querySelectorAll('.metric .number').forEach(element => {
               const finalValue = parseInt(element.textContent);
               let currentValue = 0;
               const increment = finalValue / 20;
               
               const timer = setInterval(() => {
                   currentValue += increment;
                   if (currentValue >= finalValue) {
                       currentValue = finalValue;
                       clearInterval(timer);
                   }
                   element.textContent = Math.floor(currentValue);
               }, 50);
           });
       }

       // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ Redis –∫–ª—é—á–µ–π –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
       document.querySelectorAll('.redis-key, .hash-display').forEach(element => {
           element.style.cursor = 'pointer';
           element.title = 'Click to copy';
           element.addEventListener('click', () => {
               navigator.clipboard.writeText(element.textContent).then(() => {
                   const original = element.style.background;
                   element.style.background = '#28a745';
                   element.style.color = 'white';
                   setTimeout(() => {
                       element.style.background = original;
                       element.style.color = '';
                   }, 500);
                   botProtectionTest.showNotification('üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞', 'success');
               }).catch(err => {
                   console.log('Copy failed:', err);
               });
           });
       });

       // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
       document.addEventListener('DOMContentLoaded', () => {
           setTimeout(animateMetrics, 300);
           
           // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
           setTimeout(() => {
               <?php if (!$protectionActive): ?>
               botProtectionTest.showNotification('‚ö†Ô∏è Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω! –°–∏—Å—Ç–µ–º–∞ –∑–∞—â–∏—Ç—ã –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.', 'error');
               <?php elseif ($userHashInfo && $userHashInfo['blocked']): ?>
               botProtectionTest.showNotification('üö´ –í–∞—à —Ö–µ—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —Å–∏—Å—Ç–µ–º–æ–π –∑–∞—â–∏—Ç—ã!', 'error');
               <?php elseif ($ipInfo && $ipInfo['blocked']): ?>
               botProtectionTest.showNotification('üö´ –í–∞—à IP –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —Å–∏—Å—Ç–µ–º–æ–π –∑–∞—â–∏—Ç—ã!', 'error');
               <?php elseif ($isVerified && $trustScore > 70): ?>
               botProtectionTest.showNotification('üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!', 'success');
               <?php elseif ($isMobile): ?>
               botProtectionTest.showNotification('üì± –ú–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!', 'info');
               <?php else: ?>
               botProtectionTest.showNotification('üõ°Ô∏è Bot Protection v2.0 –∞–∫—Ç–∏–≤–Ω–∞!', 'info');
               <?php endif; ?>
           }, 1000);
       });

       // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã–µ —Å–æ—á–µ—Ç–∞–Ω–∏—è
       document.addEventListener('keydown', (e) => {
           if (e.ctrlKey || e.metaKey) {
               switch(e.key) {
                   case '1':
                       e.preventDefault();
                       showTab('request-info');
                       break;
                   case '2':
                       e.preventDefault();
                       showTab('session-info');
                       break;
                   case '3':
                       e.preventDefault();
                       showTab('redis-keys');
                       break;
                   case '4':
                       e.preventDefault();
                       showTab('ttl-settings');
                       break;
                   case '5':
                       e.preventDefault();
                       showTab('testing');
                       break;
                   case 'b':
                       e.preventDefault();
                       botProtectionTest.simulateBot();
                       break;
                   case 'h':
                       e.preventDefault();
                       botProtectionTest.simulateHuman();
                       break;
               }
           }
       });

       console.log('üõ°Ô∏è Bot Protection Test Page v2.0 loaded successfully');
       console.log('Redis Status:', <?php echo $protectionActive ? 'true' : 'false'; ?>);
       console.log('User Hash Info:', <?php echo json_encode($userHashInfo ? true : false); ?>);
       console.log('Mobile Device:', <?php echo $isMobile ? 'true' : 'false'; ?>);
   </script>
</body>
</html>
